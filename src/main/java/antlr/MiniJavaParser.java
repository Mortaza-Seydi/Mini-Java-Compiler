package antlr;// Generated by ANTLR 4.7.2
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MiniJavaParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7.2", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		If=1, ELSE=2, THIS=3, CLASS=4, RETURN=5, While=6, FOR=7, DO=8, PUBLIC=9, 
		PRIVATE=10, STATIC=11, INT=12, VOID=13, BOOLEAN=14, FALSE=15, TRUE=16, 
		NEW=17, Semicolon=18, Point=19, OpenACC=20, CloseAcc=21, OpenPar=22, ClosePar=23, 
		OpenBar=24, CloseBar=25, Comma=26, Mul=27, Divide=28, Plus=29, Minus=30, 
		Equal=31, Assign=32, Great=33, GAndE=34, Small=35, SAndE=36, NotEqual=37, 
		Not=38, AND=39, OR=40, ERROR=41, Id=42, Number=43, String=44, Ws=45, Comment=46, 
		LineComment=47;
	public static final int
		RULE_minijava = 0, RULE_classDeclaration = 1, RULE_fieldDeclaration = 2, 
		RULE_methodDeclaration = 3, RULE_declarators = 4, RULE_type = 5, RULE_primType = 6, 
		RULE_classType = 7, RULE_arrType = 8, RULE_parameterList = 9, RULE_argumentList = 10, 
		RULE_reference = 11, RULE_ifStatement = 12, RULE_ifBody = 13, RULE_elseStatement = 14, 
		RULE_whileStatement = 15, RULE_whileBody = 16, RULE_varDeclaration = 17, 
		RULE_goExp = 18, RULE_statement = 19, RULE_expression = 20, RULE_arthmetic = 21, 
		RULE_urey = 22, RULE_bool = 23;
	private static String[] makeRuleNames() {
		return new String[] {
			"minijava", "classDeclaration", "fieldDeclaration", "methodDeclaration", 
			"declarators", "type", "primType", "classType", "arrType", "parameterList", 
			"argumentList", "reference", "ifStatement", "ifBody", "elseStatement", 
			"whileStatement", "whileBody", "varDeclaration", "goExp", "statement", 
			"expression", "arthmetic", "urey", "bool"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'if'", "'else'", "'this'", "'class'", "'return'", "'while'", "'for'", 
			"'do'", "'public'", "'private'", "'static'", "'int'", "'void'", "'boolean'", 
			"'false'", "'true'", "'new'", "';'", "'.'", "'{'", "'}'", "'('", "')'", 
			"'['", "']'", "','", "'*'", "'/'", "'+'", "'-'", "'=='", "'='", "'>'", 
			"'>='", "'<'", "'<='", "'!='", "'!'", "'&&'", "'||'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "If", "ELSE", "THIS", "CLASS", "RETURN", "While", "FOR", "DO", 
			"PUBLIC", "PRIVATE", "STATIC", "INT", "VOID", "BOOLEAN", "FALSE", "TRUE", 
			"NEW", "Semicolon", "Point", "OpenACC", "CloseAcc", "OpenPar", "ClosePar", 
			"OpenBar", "CloseBar", "Comma", "Mul", "Divide", "Plus", "Minus", "Equal", 
			"Assign", "Great", "GAndE", "Small", "SAndE", "NotEqual", "Not", "AND", 
			"OR", "ERROR", "Id", "Number", "String", "Ws", "Comment", "LineComment"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "antlr/MiniJava.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MiniJavaParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class MinijavaContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(MiniJavaParser.EOF, 0); }
		public List<ClassDeclarationContext> classDeclaration() {
			return getRuleContexts(ClassDeclarationContext.class);
		}
		public ClassDeclarationContext classDeclaration(int i) {
			return getRuleContext(ClassDeclarationContext.class,i);
		}
		public MinijavaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_minijava; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterMinijava(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitMinijava(this);
		}
	}

	public final MinijavaContext minijava() throws RecognitionException {
		MinijavaContext _localctx = new MinijavaContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_minijava);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(51);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CLASS) {
				{
				{
				setState(48);
				classDeclaration();
				}
				}
				setState(53);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(54);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassDeclarationContext extends ParserRuleContext {
		public TerminalNode CLASS() { return getToken(MiniJavaParser.CLASS, 0); }
		public TerminalNode Id() { return getToken(MiniJavaParser.Id, 0); }
		public TerminalNode OpenACC() { return getToken(MiniJavaParser.OpenACC, 0); }
		public TerminalNode CloseAcc() { return getToken(MiniJavaParser.CloseAcc, 0); }
		public List<MethodDeclarationContext> methodDeclaration() {
			return getRuleContexts(MethodDeclarationContext.class);
		}
		public MethodDeclarationContext methodDeclaration(int i) {
			return getRuleContext(MethodDeclarationContext.class,i);
		}
		public List<FieldDeclarationContext> fieldDeclaration() {
			return getRuleContexts(FieldDeclarationContext.class);
		}
		public FieldDeclarationContext fieldDeclaration(int i) {
			return getRuleContext(FieldDeclarationContext.class,i);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterClassDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitClassDeclaration(this);
		}
	}

	public final ClassDeclarationContext classDeclaration() throws RecognitionException {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_classDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(56);
			match(CLASS);
			setState(57);
			match(Id);
			setState(58);
			match(OpenACC);
			setState(63);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PUBLIC) | (1L << PRIVATE) | (1L << STATIC) | (1L << INT) | (1L << VOID) | (1L << BOOLEAN) | (1L << Id))) != 0)) {
				{
				setState(61);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					setState(59);
					methodDeclaration();
					}
					break;
				case 2:
					{
					setState(60);
					fieldDeclaration();
					}
					break;
				}
				}
				setState(65);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(66);
			match(CloseAcc);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FieldDeclarationContext extends ParserRuleContext {
		public DeclaratorsContext declarators() {
			return getRuleContext(DeclaratorsContext.class,0);
		}
		public TerminalNode Id() { return getToken(MiniJavaParser.Id, 0); }
		public TerminalNode Semicolon() { return getToken(MiniJavaParser.Semicolon, 0); }
		public TerminalNode Assign() { return getToken(MiniJavaParser.Assign, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterFieldDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitFieldDeclaration(this);
		}
	}

	public final FieldDeclarationContext fieldDeclaration() throws RecognitionException {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_fieldDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(68);
			declarators();
			setState(69);
			match(Id);
			setState(72);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Assign) {
				{
				setState(70);
				match(Assign);
				setState(71);
				expression(0);
				}
			}

			setState(74);
			match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodDeclarationContext extends ParserRuleContext {
		public DeclaratorsContext declarators() {
			return getRuleContext(DeclaratorsContext.class,0);
		}
		public TerminalNode Id() { return getToken(MiniJavaParser.Id, 0); }
		public TerminalNode OpenPar() { return getToken(MiniJavaParser.OpenPar, 0); }
		public TerminalNode ClosePar() { return getToken(MiniJavaParser.ClosePar, 0); }
		public TerminalNode OpenACC() { return getToken(MiniJavaParser.OpenACC, 0); }
		public TerminalNode CloseAcc() { return getToken(MiniJavaParser.CloseAcc, 0); }
		public ParameterListContext parameterList() {
			return getRuleContext(ParameterListContext.class,0);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(MiniJavaParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode Semicolon() { return getToken(MiniJavaParser.Semicolon, 0); }
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterMethodDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitMethodDeclaration(this);
		}
	}

	public final MethodDeclarationContext methodDeclaration() throws RecognitionException {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_methodDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(76);
			declarators();
			setState(77);
			match(Id);
			setState(78);
			match(OpenPar);
			setState(80);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << VOID) | (1L << BOOLEAN) | (1L << Id))) != 0)) {
				{
				setState(79);
				parameterList();
				}
			}

			setState(82);
			match(ClosePar);
			setState(83);
			match(OpenACC);
			setState(87);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << If) | (1L << THIS) | (1L << While) | (1L << INT) | (1L << VOID) | (1L << BOOLEAN) | (1L << OpenACC) | (1L << Id))) != 0)) {
				{
				{
				setState(84);
				statement();
				}
				}
				setState(89);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(94);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(90);
				match(RETURN);
				setState(91);
				expression(0);
				setState(92);
				match(Semicolon);
				}
			}

			setState(96);
			match(CloseAcc);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclaratorsContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode STATIC() { return getToken(MiniJavaParser.STATIC, 0); }
		public TerminalNode PUBLIC() { return getToken(MiniJavaParser.PUBLIC, 0); }
		public TerminalNode PRIVATE() { return getToken(MiniJavaParser.PRIVATE, 0); }
		public DeclaratorsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarators; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterDeclarators(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitDeclarators(this);
		}
	}

	public final DeclaratorsContext declarators() throws RecognitionException {
		DeclaratorsContext _localctx = new DeclaratorsContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_declarators);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(99);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PUBLIC || _la==PRIVATE) {
				{
				setState(98);
				_la = _input.LA(1);
				if ( !(_la==PUBLIC || _la==PRIVATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATIC) {
				{
				setState(101);
				match(STATIC);
				}
			}

			setState(104);
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeContext extends ParserRuleContext {
		public PrimTypeContext primType() {
			return getRuleContext(PrimTypeContext.class,0);
		}
		public ClassTypeContext classType() {
			return getRuleContext(ClassTypeContext.class,0);
		}
		public ArrTypeContext arrType() {
			return getRuleContext(ArrTypeContext.class,0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitType(this);
		}
	}

	public final TypeContext type() throws RecognitionException {
		TypeContext _localctx = new TypeContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_type);
		try {
			setState(109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(106);
				primType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(107);
				classType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(108);
				arrType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrimTypeContext extends ParserRuleContext {
		public TerminalNode INT() { return getToken(MiniJavaParser.INT, 0); }
		public TerminalNode BOOLEAN() { return getToken(MiniJavaParser.BOOLEAN, 0); }
		public TerminalNode VOID() { return getToken(MiniJavaParser.VOID, 0); }
		public PrimTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterPrimType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitPrimType(this);
		}
	}

	public final PrimTypeContext primType() throws RecognitionException {
		PrimTypeContext _localctx = new PrimTypeContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_primType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(111);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << VOID) | (1L << BOOLEAN))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassTypeContext extends ParserRuleContext {
		public TerminalNode Id() { return getToken(MiniJavaParser.Id, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterClassType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitClassType(this);
		}
	}

	public final ClassTypeContext classType() throws RecognitionException {
		ClassTypeContext _localctx = new ClassTypeContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_classType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(113);
			match(Id);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrTypeContext extends ParserRuleContext {
		public TerminalNode OpenBar() { return getToken(MiniJavaParser.OpenBar, 0); }
		public TerminalNode CloseBar() { return getToken(MiniJavaParser.CloseBar, 0); }
		public TerminalNode INT() { return getToken(MiniJavaParser.INT, 0); }
		public ClassTypeContext classType() {
			return getRuleContext(ClassTypeContext.class,0);
		}
		public ArrTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterArrType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitArrType(this);
		}
	}

	public final ArrTypeContext arrType() throws RecognitionException {
		ArrTypeContext _localctx = new ArrTypeContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_arrType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(117);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT:
				{
				setState(115);
				match(INT);
				}
				break;
			case Id:
				{
				setState(116);
				classType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(119);
			match(OpenBar);
			setState(120);
			match(CloseBar);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterListContext extends ParserRuleContext {
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public List<TerminalNode> Id() { return getTokens(MiniJavaParser.Id); }
		public TerminalNode Id(int i) {
			return getToken(MiniJavaParser.Id, i);
		}
		public List<TerminalNode> Comma() { return getTokens(MiniJavaParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(MiniJavaParser.Comma, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterParameterList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitParameterList(this);
		}
	}

	public final ParameterListContext parameterList() throws RecognitionException {
		ParameterListContext _localctx = new ParameterListContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_parameterList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(122);
			type();
			setState(123);
			match(Id);
			setState(130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(124);
				match(Comma);
				setState(125);
				type();
				setState(126);
				match(Id);
				}
				}
				setState(132);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentListContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> Comma() { return getTokens(MiniJavaParser.Comma); }
		public TerminalNode Comma(int i) {
			return getToken(MiniJavaParser.Comma, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argumentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterArgumentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitArgumentList(this);
		}
	}

	public final ArgumentListContext argumentList() throws RecognitionException {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_argumentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(133);
			expression(0);
			setState(138);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==Comma) {
				{
				{
				setState(134);
				match(Comma);
				setState(135);
				expression(0);
				}
				}
				setState(140);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceContext extends ParserRuleContext {
		public TerminalNode THIS() { return getToken(MiniJavaParser.THIS, 0); }
		public List<TerminalNode> Id() { return getTokens(MiniJavaParser.Id); }
		public TerminalNode Id(int i) {
			return getToken(MiniJavaParser.Id, i);
		}
		public List<TerminalNode> Point() { return getTokens(MiniJavaParser.Point); }
		public TerminalNode Point(int i) {
			return getToken(MiniJavaParser.Point, i);
		}
		public ReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitReference(this);
		}
	}

	public final ReferenceContext reference() throws RecognitionException {
		ReferenceContext _localctx = new ReferenceContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_reference);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(141);
			_la = _input.LA(1);
			if ( !(_la==THIS || _la==Id) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(146);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(142);
					match(Point);
					setState(143);
					match(Id);
					}
					} 
				}
				setState(148);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public TerminalNode If() { return getToken(MiniJavaParser.If, 0); }
		public TerminalNode OpenPar() { return getToken(MiniJavaParser.OpenPar, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ClosePar() { return getToken(MiniJavaParser.ClosePar, 0); }
		public IfBodyContext ifBody() {
			return getRuleContext(IfBodyContext.class,0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitIfStatement(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_ifStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(149);
			match(If);
			setState(150);
			match(OpenPar);
			setState(151);
			expression(0);
			setState(152);
			match(ClosePar);
			setState(153);
			ifBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfBodyContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public ElseStatementContext elseStatement() {
			return getRuleContext(ElseStatementContext.class,0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterIfBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitIfBody(this);
		}
	}

	public final IfBodyContext ifBody() throws RecognitionException {
		IfBodyContext _localctx = new IfBodyContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_ifBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(155);
			statement();
			setState(157);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				setState(156);
				elseStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElseStatementContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(MiniJavaParser.ELSE, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterElseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitElseStatement(this);
		}
	}

	public final ElseStatementContext elseStatement() throws RecognitionException {
		ElseStatementContext _localctx = new ElseStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_elseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(159);
			match(ELSE);
			setState(160);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileStatementContext extends ParserRuleContext {
		public TerminalNode While() { return getToken(MiniJavaParser.While, 0); }
		public TerminalNode OpenPar() { return getToken(MiniJavaParser.OpenPar, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ClosePar() { return getToken(MiniJavaParser.ClosePar, 0); }
		public WhileBodyContext whileBody() {
			return getRuleContext(WhileBodyContext.class,0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterWhileStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitWhileStatement(this);
		}
	}

	public final WhileStatementContext whileStatement() throws RecognitionException {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_whileStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(162);
			match(While);
			setState(163);
			match(OpenPar);
			setState(164);
			expression(0);
			setState(165);
			match(ClosePar);
			setState(166);
			whileBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhileBodyContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public WhileBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whileBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterWhileBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitWhileBody(this);
		}
	}

	public final WhileBodyContext whileBody() throws RecognitionException {
		WhileBodyContext _localctx = new WhileBodyContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_whileBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(168);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarDeclarationContext extends ParserRuleContext {
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode Id() { return getToken(MiniJavaParser.Id, 0); }
		public TerminalNode Semicolon() { return getToken(MiniJavaParser.Semicolon, 0); }
		public TerminalNode Assign() { return getToken(MiniJavaParser.Assign, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterVarDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitVarDeclaration(this);
		}
	}

	public final VarDeclarationContext varDeclaration() throws RecognitionException {
		VarDeclarationContext _localctx = new VarDeclarationContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_varDeclaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(170);
			type();
			setState(171);
			match(Id);
			setState(174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Assign) {
				{
				setState(172);
				match(Assign);
				setState(173);
				expression(0);
				}
			}

			setState(176);
			match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GoExpContext extends ParserRuleContext {
		public ReferenceContext reference() {
			return getRuleContext(ReferenceContext.class,0);
		}
		public TerminalNode Assign() { return getToken(MiniJavaParser.Assign, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode Semicolon() { return getToken(MiniJavaParser.Semicolon, 0); }
		public GoExpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goExp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterGoExp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitGoExp(this);
		}
	}

	public final GoExpContext goExp() throws RecognitionException {
		GoExpContext _localctx = new GoExpContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_goExp);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(178);
			reference();
			setState(179);
			match(Assign);
			setState(180);
			expression(0);
			setState(181);
			match(Semicolon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode OpenACC() { return getToken(MiniJavaParser.OpenACC, 0); }
		public TerminalNode CloseAcc() { return getToken(MiniJavaParser.CloseAcc, 0); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public VarDeclarationContext varDeclaration() {
			return getRuleContext(VarDeclarationContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public WhileStatementContext whileStatement() {
			return getRuleContext(WhileStatementContext.class,0);
		}
		public GoExpContext goExp() {
			return getRuleContext(GoExpContext.class,0);
		}
		public ReferenceContext reference() {
			return getRuleContext(ReferenceContext.class,0);
		}
		public TerminalNode OpenBar() { return getToken(MiniJavaParser.OpenBar, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode CloseBar() { return getToken(MiniJavaParser.CloseBar, 0); }
		public TerminalNode Assign() { return getToken(MiniJavaParser.Assign, 0); }
		public TerminalNode Semicolon() { return getToken(MiniJavaParser.Semicolon, 0); }
		public TerminalNode OpenPar() { return getToken(MiniJavaParser.OpenPar, 0); }
		public TerminalNode ClosePar() { return getToken(MiniJavaParser.ClosePar, 0); }
		public ArgumentListContext argumentList() {
			return getRuleContext(ArgumentListContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_statement);
		int _la;
		try {
			setState(211);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(183);
				match(OpenACC);
				setState(187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << If) | (1L << THIS) | (1L << While) | (1L << INT) | (1L << VOID) | (1L << BOOLEAN) | (1L << OpenACC) | (1L << Id))) != 0)) {
					{
					{
					setState(184);
					statement();
					}
					}
					setState(189);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(190);
				match(CloseAcc);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(191);
				varDeclaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(192);
				ifStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(193);
				whileStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(194);
				goExp();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(195);
				reference();
				setState(196);
				match(OpenBar);
				setState(197);
				expression(0);
				setState(198);
				match(CloseBar);
				setState(199);
				match(Assign);
				setState(200);
				expression(0);
				setState(201);
				match(Semicolon);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(203);
				reference();
				setState(204);
				match(OpenPar);
				setState(206);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THIS) | (1L << FALSE) | (1L << TRUE) | (1L << NEW) | (1L << OpenPar) | (1L << Plus) | (1L << Minus) | (1L << Not) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
					{
					setState(205);
					argumentList();
					}
				}

				setState(208);
				match(ClosePar);
				setState(209);
				match(Semicolon);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ReferenceContext reference() {
			return getRuleContext(ReferenceContext.class,0);
		}
		public TerminalNode OpenBar() { return getToken(MiniJavaParser.OpenBar, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode CloseBar() { return getToken(MiniJavaParser.CloseBar, 0); }
		public TerminalNode OpenPar() { return getToken(MiniJavaParser.OpenPar, 0); }
		public TerminalNode ClosePar() { return getToken(MiniJavaParser.ClosePar, 0); }
		public ArgumentListContext argumentList() {
			return getRuleContext(ArgumentListContext.class,0);
		}
		public UreyContext urey() {
			return getRuleContext(UreyContext.class,0);
		}
		public TerminalNode Number() { return getToken(MiniJavaParser.Number, 0); }
		public TerminalNode TRUE() { return getToken(MiniJavaParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MiniJavaParser.FALSE, 0); }
		public TerminalNode String() { return getToken(MiniJavaParser.String, 0); }
		public TerminalNode NEW() { return getToken(MiniJavaParser.NEW, 0); }
		public TerminalNode Id() { return getToken(MiniJavaParser.Id, 0); }
		public TerminalNode INT() { return getToken(MiniJavaParser.INT, 0); }
		public ArthmeticContext arthmetic() {
			return getRuleContext(ArthmeticContext.class,0);
		}
		public BoolContext bool() {
			return getRuleContext(BoolContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 40;
		enterRecursionRule(_localctx, 40, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(254);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(214);
				reference();
				}
				break;
			case 2:
				{
				setState(215);
				reference();
				setState(216);
				match(OpenBar);
				setState(217);
				expression(0);
				setState(218);
				match(CloseBar);
				}
				break;
			case 3:
				{
				setState(220);
				reference();
				setState(221);
				match(OpenPar);
				setState(223);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << THIS) | (1L << FALSE) | (1L << TRUE) | (1L << NEW) | (1L << OpenPar) | (1L << Plus) | (1L << Minus) | (1L << Not) | (1L << Id) | (1L << Number) | (1L << String))) != 0)) {
					{
					setState(222);
					argumentList();
					}
				}

				setState(225);
				match(ClosePar);
				}
				break;
			case 4:
				{
				setState(227);
				urey();
				setState(228);
				expression(9);
				}
				break;
			case 5:
				{
				setState(230);
				match(OpenPar);
				setState(231);
				expression(0);
				setState(232);
				match(ClosePar);
				}
				break;
			case 6:
				{
				setState(234);
				match(Number);
				}
				break;
			case 7:
				{
				setState(235);
				match(TRUE);
				}
				break;
			case 8:
				{
				setState(236);
				match(FALSE);
				}
				break;
			case 9:
				{
				setState(237);
				match(String);
				}
				break;
			case 10:
				{
				setState(238);
				match(NEW);
				setState(252);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					setState(239);
					match(Id);
					setState(240);
					match(OpenPar);
					setState(241);
					match(ClosePar);
					}
					break;
				case 2:
					{
					setState(242);
					match(INT);
					setState(243);
					match(OpenBar);
					setState(244);
					expression(0);
					setState(245);
					match(CloseBar);
					}
					break;
				case 3:
					{
					setState(247);
					match(Id);
					setState(248);
					match(OpenBar);
					setState(249);
					expression(0);
					setState(250);
					match(CloseBar);
					}
					break;
				}
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(266);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(264);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(256);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(257);
						arthmetic();
						setState(258);
						expression(9);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(260);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(261);
						bool();
						setState(262);
						expression(8);
						}
						break;
					}
					} 
				}
				setState(268);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ArthmeticContext extends ParserRuleContext {
		public TerminalNode Mul() { return getToken(MiniJavaParser.Mul, 0); }
		public TerminalNode Divide() { return getToken(MiniJavaParser.Divide, 0); }
		public TerminalNode Plus() { return getToken(MiniJavaParser.Plus, 0); }
		public TerminalNode Minus() { return getToken(MiniJavaParser.Minus, 0); }
		public ArthmeticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arthmetic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterArthmetic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitArthmetic(this);
		}
	}

	public final ArthmeticContext arthmetic() throws RecognitionException {
		ArthmeticContext _localctx = new ArthmeticContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_arthmetic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(269);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Mul) | (1L << Divide) | (1L << Plus) | (1L << Minus))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UreyContext extends ParserRuleContext {
		public TerminalNode Plus() { return getToken(MiniJavaParser.Plus, 0); }
		public TerminalNode Minus() { return getToken(MiniJavaParser.Minus, 0); }
		public TerminalNode Not() { return getToken(MiniJavaParser.Not, 0); }
		public UreyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_urey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterUrey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitUrey(this);
		}
	}

	public final UreyContext urey() throws RecognitionException {
		UreyContext _localctx = new UreyContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_urey);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(271);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Plus) | (1L << Minus) | (1L << Not))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MiniJavaParser.AND, 0); }
		public TerminalNode OR() { return getToken(MiniJavaParser.OR, 0); }
		public TerminalNode Equal() { return getToken(MiniJavaParser.Equal, 0); }
		public TerminalNode Great() { return getToken(MiniJavaParser.Great, 0); }
		public TerminalNode GAndE() { return getToken(MiniJavaParser.GAndE, 0); }
		public TerminalNode Small() { return getToken(MiniJavaParser.Small, 0); }
		public TerminalNode SAndE() { return getToken(MiniJavaParser.SAndE, 0); }
		public TerminalNode NotEqual() { return getToken(MiniJavaParser.NotEqual, 0); }
		public BoolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).enterBool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MiniJavaListener ) ((MiniJavaListener)listener).exitBool(this);
		}
	}

	public final BoolContext bool() throws RecognitionException {
		BoolContext _localctx = new BoolContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_bool);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(273);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Great) | (1L << GAndE) | (1L << Small) | (1L << SAndE) | (1L << NotEqual) | (1L << AND) | (1L << OR))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 8);
		case 1:
			return precpred(_ctx, 7);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\61\u0116\4\2\t\2"+
		"\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\3\2\7\2\64\n\2\f\2\16\2\67\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\7\3@\n\3"+
		"\f\3\16\3C\13\3\3\3\3\3\3\4\3\4\3\4\3\4\5\4K\n\4\3\4\3\4\3\5\3\5\3\5\3"+
		"\5\5\5S\n\5\3\5\3\5\3\5\7\5X\n\5\f\5\16\5[\13\5\3\5\3\5\3\5\3\5\5\5a\n"+
		"\5\3\5\3\5\3\6\5\6f\n\6\3\6\5\6i\n\6\3\6\3\6\3\7\3\7\3\7\5\7p\n\7\3\b"+
		"\3\b\3\t\3\t\3\n\3\n\5\nx\n\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\7\13\u0083\n\13\f\13\16\13\u0086\13\13\3\f\3\f\3\f\7\f\u008b\n\f\f\f"+
		"\16\f\u008e\13\f\3\r\3\r\3\r\7\r\u0093\n\r\f\r\16\r\u0096\13\r\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\17\3\17\5\17\u00a0\n\17\3\20\3\20\3\20\3\21"+
		"\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\23\5\23\u00b1\n\23"+
		"\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\7\25\u00bc\n\25\f\25\16"+
		"\25\u00bf\13\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\5\25\u00d1\n\25\3\25\3\25\3\25\5\25\u00d6\n"+
		"\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u00e2\n\26"+
		"\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26"+
		"\u00ff\n\26\5\26\u0101\n\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\7"+
		"\26\u010b\n\26\f\26\16\26\u010e\13\26\3\27\3\27\3\30\3\30\3\31\3\31\3"+
		"\31\2\3*\32\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\2\b\3\2"+
		"\13\f\3\2\16\20\4\2\5\5,,\3\2\35 \4\2\37 ((\5\2!!#\')*\2\u0124\2\65\3"+
		"\2\2\2\4:\3\2\2\2\6F\3\2\2\2\bN\3\2\2\2\ne\3\2\2\2\fo\3\2\2\2\16q\3\2"+
		"\2\2\20s\3\2\2\2\22w\3\2\2\2\24|\3\2\2\2\26\u0087\3\2\2\2\30\u008f\3\2"+
		"\2\2\32\u0097\3\2\2\2\34\u009d\3\2\2\2\36\u00a1\3\2\2\2 \u00a4\3\2\2\2"+
		"\"\u00aa\3\2\2\2$\u00ac\3\2\2\2&\u00b4\3\2\2\2(\u00d5\3\2\2\2*\u0100\3"+
		"\2\2\2,\u010f\3\2\2\2.\u0111\3\2\2\2\60\u0113\3\2\2\2\62\64\5\4\3\2\63"+
		"\62\3\2\2\2\64\67\3\2\2\2\65\63\3\2\2\2\65\66\3\2\2\2\668\3\2\2\2\67\65"+
		"\3\2\2\289\7\2\2\39\3\3\2\2\2:;\7\6\2\2;<\7,\2\2<A\7\26\2\2=@\5\b\5\2"+
		">@\5\6\4\2?=\3\2\2\2?>\3\2\2\2@C\3\2\2\2A?\3\2\2\2AB\3\2\2\2BD\3\2\2\2"+
		"CA\3\2\2\2DE\7\27\2\2E\5\3\2\2\2FG\5\n\6\2GJ\7,\2\2HI\7\"\2\2IK\5*\26"+
		"\2JH\3\2\2\2JK\3\2\2\2KL\3\2\2\2LM\7\24\2\2M\7\3\2\2\2NO\5\n\6\2OP\7,"+
		"\2\2PR\7\30\2\2QS\5\24\13\2RQ\3\2\2\2RS\3\2\2\2ST\3\2\2\2TU\7\31\2\2U"+
		"Y\7\26\2\2VX\5(\25\2WV\3\2\2\2X[\3\2\2\2YW\3\2\2\2YZ\3\2\2\2Z`\3\2\2\2"+
		"[Y\3\2\2\2\\]\7\7\2\2]^\5*\26\2^_\7\24\2\2_a\3\2\2\2`\\\3\2\2\2`a\3\2"+
		"\2\2ab\3\2\2\2bc\7\27\2\2c\t\3\2\2\2df\t\2\2\2ed\3\2\2\2ef\3\2\2\2fh\3"+
		"\2\2\2gi\7\r\2\2hg\3\2\2\2hi\3\2\2\2ij\3\2\2\2jk\5\f\7\2k\13\3\2\2\2l"+
		"p\5\16\b\2mp\5\20\t\2np\5\22\n\2ol\3\2\2\2om\3\2\2\2on\3\2\2\2p\r\3\2"+
		"\2\2qr\t\3\2\2r\17\3\2\2\2st\7,\2\2t\21\3\2\2\2ux\7\16\2\2vx\5\20\t\2"+
		"wu\3\2\2\2wv\3\2\2\2xy\3\2\2\2yz\7\32\2\2z{\7\33\2\2{\23\3\2\2\2|}\5\f"+
		"\7\2}\u0084\7,\2\2~\177\7\34\2\2\177\u0080\5\f\7\2\u0080\u0081\7,\2\2"+
		"\u0081\u0083\3\2\2\2\u0082~\3\2\2\2\u0083\u0086\3\2\2\2\u0084\u0082\3"+
		"\2\2\2\u0084\u0085\3\2\2\2\u0085\25\3\2\2\2\u0086\u0084\3\2\2\2\u0087"+
		"\u008c\5*\26\2\u0088\u0089\7\34\2\2\u0089\u008b\5*\26\2\u008a\u0088\3"+
		"\2\2\2\u008b\u008e\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d"+
		"\27\3\2\2\2\u008e\u008c\3\2\2\2\u008f\u0094\t\4\2\2\u0090\u0091\7\25\2"+
		"\2\u0091\u0093\7,\2\2\u0092\u0090\3\2\2\2\u0093\u0096\3\2\2\2\u0094\u0092"+
		"\3\2\2\2\u0094\u0095\3\2\2\2\u0095\31\3\2\2\2\u0096\u0094\3\2\2\2\u0097"+
		"\u0098\7\3\2\2\u0098\u0099\7\30\2\2\u0099\u009a\5*\26\2\u009a\u009b\7"+
		"\31\2\2\u009b\u009c\5\34\17\2\u009c\33\3\2\2\2\u009d\u009f\5(\25\2\u009e"+
		"\u00a0\5\36\20\2\u009f\u009e\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\35\3\2"+
		"\2\2\u00a1\u00a2\7\4\2\2\u00a2\u00a3\5(\25\2\u00a3\37\3\2\2\2\u00a4\u00a5"+
		"\7\b\2\2\u00a5\u00a6\7\30\2\2\u00a6\u00a7\5*\26\2\u00a7\u00a8\7\31\2\2"+
		"\u00a8\u00a9\5\"\22\2\u00a9!\3\2\2\2\u00aa\u00ab\5(\25\2\u00ab#\3\2\2"+
		"\2\u00ac\u00ad\5\f\7\2\u00ad\u00b0\7,\2\2\u00ae\u00af\7\"\2\2\u00af\u00b1"+
		"\5*\26\2\u00b0\u00ae\3\2\2\2\u00b0\u00b1\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2"+
		"\u00b3\7\24\2\2\u00b3%\3\2\2\2\u00b4\u00b5\5\30\r\2\u00b5\u00b6\7\"\2"+
		"\2\u00b6\u00b7\5*\26\2\u00b7\u00b8\7\24\2\2\u00b8\'\3\2\2\2\u00b9\u00bd"+
		"\7\26\2\2\u00ba\u00bc\5(\25\2\u00bb\u00ba\3\2\2\2\u00bc\u00bf\3\2\2\2"+
		"\u00bd\u00bb\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00c0\3\2\2\2\u00bf\u00bd"+
		"\3\2\2\2\u00c0\u00d6\7\27\2\2\u00c1\u00d6\5$\23\2\u00c2\u00d6\5\32\16"+
		"\2\u00c3\u00d6\5 \21\2\u00c4\u00d6\5&\24\2\u00c5\u00c6\5\30\r\2\u00c6"+
		"\u00c7\7\32\2\2\u00c7\u00c8\5*\26\2\u00c8\u00c9\7\33\2\2\u00c9\u00ca\7"+
		"\"\2\2\u00ca\u00cb\5*\26\2\u00cb\u00cc\7\24\2\2\u00cc\u00d6\3\2\2\2\u00cd"+
		"\u00ce\5\30\r\2\u00ce\u00d0\7\30\2\2\u00cf\u00d1\5\26\f\2\u00d0\u00cf"+
		"\3\2\2\2\u00d0\u00d1\3\2\2\2\u00d1\u00d2\3\2\2\2\u00d2\u00d3\7\31\2\2"+
		"\u00d3\u00d4\7\24\2\2\u00d4\u00d6\3\2\2\2\u00d5\u00b9\3\2\2\2\u00d5\u00c1"+
		"\3\2\2\2\u00d5\u00c2\3\2\2\2\u00d5\u00c3\3\2\2\2\u00d5\u00c4\3\2\2\2\u00d5"+
		"\u00c5\3\2\2\2\u00d5\u00cd\3\2\2\2\u00d6)\3\2\2\2\u00d7\u00d8\b\26\1\2"+
		"\u00d8\u0101\5\30\r\2\u00d9\u00da\5\30\r\2\u00da\u00db\7\32\2\2\u00db"+
		"\u00dc\5*\26\2\u00dc\u00dd\7\33\2\2\u00dd\u0101\3\2\2\2\u00de\u00df\5"+
		"\30\r\2\u00df\u00e1\7\30\2\2\u00e0\u00e2\5\26\f\2\u00e1\u00e0\3\2\2\2"+
		"\u00e1\u00e2\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4\7\31\2\2\u00e4\u0101"+
		"\3\2\2\2\u00e5\u00e6\5.\30\2\u00e6\u00e7\5*\26\13\u00e7\u0101\3\2\2\2"+
		"\u00e8\u00e9\7\30\2\2\u00e9\u00ea\5*\26\2\u00ea\u00eb\7\31\2\2\u00eb\u0101"+
		"\3\2\2\2\u00ec\u0101\7-\2\2\u00ed\u0101\7\22\2\2\u00ee\u0101\7\21\2\2"+
		"\u00ef\u0101\7.\2\2\u00f0\u00fe\7\23\2\2\u00f1\u00f2\7,\2\2\u00f2\u00f3"+
		"\7\30\2\2\u00f3\u00ff\7\31\2\2\u00f4\u00f5\7\16\2\2\u00f5\u00f6\7\32\2"+
		"\2\u00f6\u00f7\5*\26\2\u00f7\u00f8\7\33\2\2\u00f8\u00ff\3\2\2\2\u00f9"+
		"\u00fa\7,\2\2\u00fa\u00fb\7\32\2\2\u00fb\u00fc\5*\26\2\u00fc\u00fd\7\33"+
		"\2\2\u00fd\u00ff\3\2\2\2\u00fe\u00f1\3\2\2\2\u00fe\u00f4\3\2\2\2\u00fe"+
		"\u00f9\3\2\2\2\u00ff\u0101\3\2\2\2\u0100\u00d7\3\2\2\2\u0100\u00d9\3\2"+
		"\2\2\u0100\u00de\3\2\2\2\u0100\u00e5\3\2\2\2\u0100\u00e8\3\2\2\2\u0100"+
		"\u00ec\3\2\2\2\u0100\u00ed\3\2\2\2\u0100\u00ee\3\2\2\2\u0100\u00ef\3\2"+
		"\2\2\u0100\u00f0\3\2\2\2\u0101\u010c\3\2\2\2\u0102\u0103\f\n\2\2\u0103"+
		"\u0104\5,\27\2\u0104\u0105\5*\26\13\u0105\u010b\3\2\2\2\u0106\u0107\f"+
		"\t\2\2\u0107\u0108\5\60\31\2\u0108\u0109\5*\26\n\u0109\u010b\3\2\2\2\u010a"+
		"\u0102\3\2\2\2\u010a\u0106\3\2\2\2\u010b\u010e\3\2\2\2\u010c\u010a\3\2"+
		"\2\2\u010c\u010d\3\2\2\2\u010d+\3\2\2\2\u010e\u010c\3\2\2\2\u010f\u0110"+
		"\t\5\2\2\u0110-\3\2\2\2\u0111\u0112\t\6\2\2\u0112/\3\2\2\2\u0113\u0114"+
		"\t\7\2\2\u0114\61\3\2\2\2\32\65?AJRY`ehow\u0084\u008c\u0094\u009f\u00b0"+
		"\u00bd\u00d0\u00d5\u00e1\u00fe\u0100\u010a\u010c";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}